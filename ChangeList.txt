Change List
-----------

Version 1.0.0.12, 5/28/07
-------------------------
1. Added option in BeginUpdate() to defer sorting and filtering until call to EndUpdate().
2. Fixed bug where ListChanged events were raised for list items not in the view.
3. Added Sort property that takes a string parameter containing sort property names and directions (ala DataView.Sort).
4. Added support for property paths in sorting.
 

Version 1.0.0.11, 5/6/07
------------------------
1. Added Select() methods to return list items that match some criteria.
2. Added Find() convenience methods and made IBindingListView.Find() an explicit interface implementation.
3. Added property path support to refer to properties of list item properties in Filter, Find() and Select().
4. Fixed bug when deleting items from a sorted view (ListChanged+Reset and Sorted events are no longer raised).
5. Fixed bug with trailing whitespace in Filter expression.
6. Added RemovingItem event.  This is raised just prior a list item removal, but only when the removal is done through
   a method of ObjectListView.
7. Replaced ListItemFilter<T> usage with equivalent Predicate<T> (and non-generic Predicate) for better framework consistency.
8. Added documentation XML file for Intellisense.


Version 1.0.0.10, 4/1/07
-------------------------
1. Added documentation file.
2. Made the following properties explicit interface implementations:
   IBindingList.SupportsChangeNotification
   IBindingList.SupportsSearching
   IBindingList.SupportsSorting
   IBindingListView.SupportsAdvancedSorting
   IBindingListView.SupportsFiltering
3. Changed the accessibility of the following classes to internal:
   AnalysisForm
   SortDescription
   SortDescriptionCollection
   VisualizerForm
   VisualizerTForm
4. IList.Remove() no longer throws an exception if the item is not present in the list.
5. Fixed Filter expression bug: quotes not parsed correctly (e.g. Filter = "FirstName = 'Smi*' AND LastName = 'J*'").


Version 1.0.0.9, 3/11/07
-----------------------
1. Don't invalidate enumerators when a list item property is changed, unless the property is in the view's sort or filter criteria.
2. Exposed OnListChanged(), OnSorted(), and OnAddingNew() as protected virtual for extensibility.
3. Added ToArray() method.
4. Fixed buttonNew_Click() bug in MasterDetail demo code.
5. Fixed bug where list item property change events were not wired for items already in list at ObjectListView<T> construction time.
6. Included license terms in Readme.txt (it's free!).
7. Added debugger visualizer!


Version 1.0.0.8, 2/25/07
------------------------
1. Extended Filter property to allow complex expressions.
2. Added ApplyFilter() method to update view when FilterPredicate criteria has changed (but the delegate has not).


Version 1.0.0.7, 1/1/07
-----------------------
1. Added a generic version of ObjectListView: ObjectListView<T>.
2. Bug fix: during AddNew() when the view is filtered, return the last view position as the index of the added item (instead of the last list position).
3. Bug fix: Raise ListChanged+Reset event when FilterPredicate property is set.


Version 1.0.0.6, 12/26/06
-------------------------
1. Added ICancelAddNew support.  A list item added via AddNew() is now "uncommitted" until EndNew() is called.  "Uncommitted" means
   that the item will appear as the last item in the view, and will not be repositioned due to sorting, or excluded due to filtering.
   Also, no ListChanged+ItemChanged events will be raised for the uncommitted row.  The uncommitted item is available through the indexer and
   reflected in the Count property however.
2. Behavior changes for list item types implementing IEditableObject:
	- During a call to AddNew(), the new (uncommitted) item is added immediately to the underlying list.
	- The uncommitted item is available through the indexer and Count properties.
3. Bug fix: Events are not raised when a lock is held.


Version 1.0.0.5, 12/17/06
-------------------------
1. Added FilterPredicate property for code-based filtering.
2. Bug fix: When raising ListChanged+ItemDeleted for a call to ObjectListView.Remove() for a non-notifying list, set ListChangedEventArgs.NewIndex
            to the correct value (was zero).


Version 1.0.0.4, 12/10/06
-------------------------
Added property comparers for custom sorting.


Version 1.0.0.3, 12/3/06
------------------------
1. Ensure that sorting is stable (preserves original list order when item sort values are equal).
2. Added BeginUpdate() and EndUpdate() methods to improve performance when making large changes to the underlying list.
3. Added ITypedList support, allowing binding components to detect the properties of the list items.
4. Added Sorted event, which is raised after an explicit sort (ApplySort()) or an implicit sort (item property change).
5. Bug fix: Raise ListChanged+Reset only once during a sort operation when items have been added to the underlying list, unknown to the view.
6. Added additional filter operators (!=, <>, <, <=, >, >=).


Version 1.0.0.1, 10/11/06
-------------------------
1. Fixed RemovedFilter (previously threw NotImplementedException).
2. Respect IsSynchronized and SyncRoot properties of underlying list
	- All ObjectListView methods and properties are now thread-safe IF the underlying list is synchronized.
	- ListChanged events are raised after the view is unlocked, to avoid deadlocks on list access in event handlers.


Version 1.0.0.0, 10/9/06
------------------------
Initial version.